Commands_Assignment : By Sai Srinivas Chetti

Given Shell Command:
curl -s http://public-dns.info/nameserver/br.csv | cut -d, -f1 | shuf | tail -n 50 | xargs -i timeout 1 ping -c1 -w 1 {} | grep "time=" | awk '{print substr($7, 6, length($7)) " " substr($4, 1, length($4) -1)}' | sort -n | awk '{print $2 " " $1 "ms"}' | head -n 10

1. curl -s http://public-dns.info/nameserver/br.csv 

	curl : Transfers data from or to a server, using one of the protocols: HTTP, HTTPS, FTP, FTPS, SCP, SFTP, TFTP, DICT, TELNET, LDAP or 			FILE. (To transfer multiple files use wget or FTP.). It downloads the contents specified in the url.
	-s : Silent or quiet mode. Don't show progress meter or error messages.

	Now when we execute the above command it goes to mentioned url and transfers the data from the file "br.csv" and displays in our 		terminal without showing errors messages or progress meter

	'|' : send the output from the previous command as the input to the next command.

2.  cut -d, -f1

	cut : This command is used for cutting sections from each line of files and writing the results to standard output. It can be 		 	used to cut parts of a line by byte position, character and delimiter.
	-d  : specifies the delimiter(',')
	-f1 : specifies which field of the line to be printed, in this case it prints the first column from each line

3. shuf : creates permutations from all the lines in the input.

4. tail -n 50

	tail : The tail command is used to print the last 'n' lines from the file on the terminal. Here it outputs the last 50 lines from 			the shuffled output.

5. xargs -i timeout 1 ping -c1 -w 1 {}

	xargs :  used to build and execute command lines from standard input. Commands such as grep and awk can accept the standard input as a 			parameter, or argument by using a pipe.
	-i : -i option is for replacing the {} in the initial arguments with the lines from the input, by using -i we are also specifying that 			newline is the seperator which is like using -L1.
	timeout : it specifies the time after whcih a specific command should stop processing. It's syntax is timeout time_in_secs command. 			Here it runs ping command for a max time of 1 sec.
	ping : this command sends a echo request with the specified number of packets to the mentioned 	host and waits for the echo reply 			packets to arrive from the host and gives the statistics of no.of packets sent,recieved,data loss and time taken.
	-c1 : tells the ping command to send only one packet and stop, if deadline(-w) is used then it stops after the timeout occurs or after 			the count mentioned no.of packets have been sent which ever occurs first.
	-w1 : deadline, it specifies the time before which the ping will exit regardless of no.of packets sent or recieved.

6. grep "time="

	grep : searches for the mentioned string("time=") in the input text and prints out all those lines which contains that string.

7. awk '{print substr($7, 6, length($7)) " " substr($4, 1, length($4) -1)}'

	awk : awk command searches files for text containing a pattern. When a line or text matches, awk performs a specific action on that 			line/text. The Program statement tells awk what operation to do; Program statement consists of a series of "rules" where each 			rule specifies one pattern to search for, and one action to perform when a particular pattern is found. Here no pattern is 			specified so the action takes place on all lines.

	substr : It's a function of awk, It's syntax is substr(S,a,b). It prints a substring from the string mentioned starting from the 			position a containing b number of characters.Here it goes to the column 7 and starts from 6 to the end of the string.

8. sort -n

	This command sorts the lines of the text files if mentioned in a specied manner. Here "-n" compares according to the string numerical 		value.

9. awk '{print $2 " " $1 "ms"}'

	prints the second column 'space' the first column followed by 'ms'.

10. head -n 10

	head : it prints out the first 10 lines of the text file if not mentioned, if mentioned head -n N then prints the first N no.of 			lines.

Final Output :

Overall the command transfers the data in the br.csv file and then cuts out the first column which contains the ip addresses, shuffles them and takes just the last 50 lines and then pings the ip addresses and it takes into account the lines which contains "time=" and prints the substrings and displays the top 10 ip addresses ranked according to the time taken 1st being the least time taken.





